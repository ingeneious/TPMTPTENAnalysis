source("https://bioconductor.org/biocLite.R")
biocLite("mygene")
library('mygene')
xli=c('LDLR','CETP')
res <- queryMany(xli, scopes='symbol', fields=c('entrezgene', 'go'), species='human')
res[1, 'go.BP']
res
res[2, 'go.BP']
res[3, 'go.BP']
q()
a <- read.table('gene')
xli <- c('BRCA1', 'BRCA2','SOX2', 'MYC')
a <- read.table('../only_aa_change_set_VdP.txt', header=TRUE)
Ref <- read.table('../LDLR_mutations_Poliphen', header=TRUE)
A_t=c( 'Arg'= 'R', 'His' ='H', 'Lys'='K', 'Asp'='D', 'Glu'='E', 'Ser'='S', 'Thr'='T','Asn'='N', 'Gln'='Q', 'Cys' = 'C', 'Sec'='U', 'Gly'='G', 'Pro'='P', 'Ala'='A', 'Ile'='I', 'Leu'='L', 'Met'='M', 'Phe'='F', 'Trp'='W', 'Tyr'='Y', 'Val'='V')
for(i in 1:nrow(a)){
CE=a$Mut_AA[i]
C_AA=A_t[[toString(a$Mut_AA[i])]] # mutated AA type
CH_AA_pos=a[i,'position'] # current AA position in protein
C_Mut=Ref[CH_AA_pos,C_AA]
cat(toString(a$Mut_AA[i]), CH_AA_pos,C_Mut, '\n')
}
wd()
getwd()
wd()
getwd()
setwd('/home/frareg/Desktop/CAGI_5_asses/prime_prove/')
setwd('/home/frareg/Desktop/CAGI_5_asses/prime_prove/src')
exp_val <- read.table('../data/experimental_value/real_proliferation.txt', sep='\t', header=TRUE)
file_name <- read.table('../data/submission/p16_Submission_1.txt', sep='\t', header=TRUE)
infile='../data/submission/p16_Submission_1.txt'
if (file.access('../data/submission/p16_Submission_1.txt',mode=4) < 0) stop("No permission to read file ",infile,"!") #ricontrollare
if (file.access('../data/submission/p16_Submission_1.txt',mode=4) < 0) stop("No permission to read file ",infile,"!") #ricontrollare
infile='../data/submission/p16_Submission_1.txt'
if (file.access('../data/submission/p16_Submission_1.txt',mode=4) < 0) stop("No permission to read file ",infile,"!") #ricontrollare
correct_line_number=nrow(exp_val)   #later cvheck you have same number of lines
submission_line_number=nrow(file_name)
correct_line_number
submission_line_number
correct_line_number!=submission_line_number
if (correct_line_number!=correct_line_number){print('stop')}
correct_line_number=3
if (correct_line_number!=correct_line_number){print('stop')}
correct_line_number
correct_line_number!=submission_line_number
colnames(exp_val)
colnames(exp_val)[:ncol(exp_val)-1]
colnames(exp_val)[ncol(exp_val)-1]
colnames(exp_val)[1:ncol(exp_val)-1]
nrow(file_name)
file_name[,1]
type(file_name1)
typeof(file_name1)
which(file_name1)
typeof(file_name)
which(file_name)
file_name[,1]
exp_val[,1]
######## add command  Rscript folder_name experimental_value_table
# PRATICAMENTE LE UNICHE INFORMAZIONI ALL'inizio
############### command check ######
# CONVERT IN A FUNCTION
##################################################input parameters to select correct file#######################
exp_val <- read.table('../data/experimental_value/real_proliferation.txt', sep='\t', header=TRUE) #file with experimental data
number_of_columns=4 # expected number of columns
number_of_lines=10 # do not consider header line
correct_header=c('Variant','Proliferation.rate','Standard.Deviation') # R readtable reads '-' as '.'
#setwd('/home/frareg/Desktop/CAGI_5_asses/prime_prove/src')
#check permission to read file CONTROLLA CHE FUNZIONI
infile='../data/submission/p16_Submission_1.txt'
if (file.access('../data/submission/p16_Submission_1.txt',mode=4) < 0) stop("No permission to read file ",infile,"!") #ricontrollare
#read files
file_name <- read.table('../data/submission/p16_Submission_1.txt', sep='\t', header=TRUE) #file with submission data
#check submission file has correct number of lines
submission_line_number=nrow(file_name)
if (number_of_lines!=submission_line_number){stop('submission file ',infile,' has not a correct number of lines')}
#check number of fields of each line is correct
submission_col_number=ncol(file_name)
if(number_of_columns!=submission_col_number){ stop ('submission file ', infile, ' has not a correct number of columns')} # comment column is optional
#check if header is valid
if(all(correct_header!=colnames(file_name))){ stop ('submission file', infile, ' has not a correct header')} # take in account case in which comment column was not added
#extract data columns
#check each column contains valid character (for example: in some columns only numbers are accepted, etc....)
#check column 1
#check if the first column contains valid allele descriptors, where ^ marks start and $ marks end
if (any(regexpr("^\\w\.\\d+\\w\:\[:space:]",body.cols[[1]]) != 1)) {       # escape sequences \d, \s and \w represent any decimal digit, space character and ‘word’ character, * means zero or one match,  + means preceding item will match one or more times
stop("First column must contain valid alleles!")
}
#(,\\w\\d+\\w)*$
#if (any(regexpr("^\\w\\d+\\w(,\\w\\d+\\w)*$",body.cols[[1]]) != 1)) {       # escape sequences \d, \s and \w represent any decimal digit, space character and ‘word’ character, * means zero or one match,  + means preceding item will match one or more times
#  stop("First column must contain valid alleles!")
#}
#check if the second (variant) column contains valid allele descriptors
#if (any(regexpr("^\\w\\d+\\w(,\\w\\d+\\w)*$",body.cols[[2]]) != 1)) {
#  stop("First column must contain valid alleles!")
#}
#check if the third column is numerical values or stars
#if (!all(sapply(body.cols[[3]],function(x) x == "*" || !is.na(as.numeric(x))))) {
#  stop("Second column must be numeric or \"*\"!")
#}
#check if the fourth column is numerical values or stars
#if (!all(sapply(body.cols[[4]],function(x) x == "*" || (!is.na(as.numeric(x))) ))) {
#  stop("Third column must be numeric or \"*\"!")
#}
#### CONTROLLA CHE l'ultima colonna non siano commenti, per il resto usa  le ultime due colonne che hanno numeri
length(colnames(file_name))
length(correct_header)
file_name <- read.table('../data/submission/p16_Submission_1.txt', sep='\t', header=TRUE)
file_name <- read.table('../data/submission/p16_Submission_1.txt', sep='\t', na.strings='\t', header=TRUE)
file_name
file_name <- read.table('../data/submission/p16_Submission_1.txt', sep='\t', header=TRUE)
file_name
regexpr("^\\w\\w\\w\\d+\\w\\w",file_name[,1])
file_name[,1]
p='p.G35R'
regexpr("^\\w\\w\\w\\d+\\w\\w",p)
p='p.G35R:'
regexpr("^\\w\\w\\w\\d+\\w\\w",p)
regexpr("^\\w\\w\\w\\d+\\w\\w$",p)
f='a'
regexpr("^\\w",a)
regexpr("^\\w",f)
f='a.G'
regexpr("^\\w\w\w",f)
regexpr("^\\w\\w\\w",f)
f='adG'
regexpr("^\\w\\w\\w",f)
f='a.G'
regexpr("^\\w\\[:punct:]\\w",f)
regexpr("^\\w\\[:punct:]\\w",f)
regexpr("^\\w\\.\\w",f)
regexpr("^\\w\\.\\d+\\w",f)
p='p.G35R:'
regexpr("^\\w\\.\\d+\\w\\:",f)
regexpr("^\\w\\.\\d+\\w\\:",p)
p='p.G35R:'
regexpr("^\\w\\.\\w\\d+\\w\\:",p)
file_name[,1]
regexpr("(^\\w\\.\\w\\d+\\w\\:)+",p)
regexpr("(^\\w\\.\\w\\d+\\w\\:)*",p)
c=''
regexpr("(^\\w\\.\\w\\d+\\w\\:)*",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:)+",c)
c='p.G35R: c.103G>A'
regexpr("(^\\w\\.\\w\\d+\\w\\:)+",c)
c='p.G35R: c.103G>A'
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\<\\w$)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\\w$)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>)+",c)
c
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\\w\)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>$)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>\\w)+",c)
c
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\[:punct]\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\[:punct]\\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\[:punct])+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\>)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\s)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q\\>)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\q)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\q>)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\q\\>\\e)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q\\>\\E)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q\>\E)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q>\E)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q\>\E)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q\\>\E)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w\\Q\\>\\E)+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w[:punct:])+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w[>])+",c)
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w[>]\\w)+",c)
c
regexpr("(^\\w\\.\\w\\d+\\w\\:\\s\\w\\.\\d+\\w[>]\\w)+",c)
file_name[,1]
regexpr("(^[p]\\.\\w\\d+\\w\\:\\s[c]\\.\\d+\\w[>]\\w)+",c)
regexpr("(^[p]\\.\\w\\d+\\w\\:\\s[c]\\.\\d+\\w[>]\\w)+", file_name[1+])
regexpr("(^[p]\\.\\w\\d+\\w\\:\\s[c]\\.\\d+\\w[>]\\w)+", file_name[,1])
regexpr("(^[p]\\.\\w\\d+\\w\\:\\s[c]\\.\\d+\\w[>]\\w)+", file_name[5,1])
file_name[5,1]
file_name[1,1]
regexpr("(^[p]\\.\\w\\d+\\w\\:*\\s[c]\\.\\d+\\w[>]\\w)+", file_name[5,1])
regexpr("(^[p]\\.\\w\\d+\\w\\:*\\s[c]\\.\\d+\\w[>]\\w)+", file_name[,1])
regexpr("(^[p]\\.\\w\\d+\\w\\:*\\s[c]\\.\\d+\\w[>]\\w)+", file_name[nrow(file_name),1])
file_name[nrow(file_name),1]
regexpr("(^[p]\\.\\w\\d+\\w\\:*\\s[c]\\.\\d+\\s*\\w[>]\\w)+", file_name[nrow(file_name),1])
regexpr("(^[p]\\.\\w\\d+\\w\\:*\\s[c]\\.\\d+\\s*\\w[>]\\w)+", file_name[,1])
!all(sapply(file_name[,4],function(x) x == "*" || !is.na(as.numeric(x))))
file_name[4]
file_name[,4]
!all(sapply(file_name[4],function(x) x == "*" || !is.na(as.numeric(x))))
!all(sapply(file_name[,4],function(x) x == "*" || !is.na(as.numeric(x))))
x
all(sapply(file_name[,4],function(x) x == "*" || !is.na(as.numeric(x))))
sapply(file_name[,4],function(x) x == "*" || !is.na(as.numeric(x)))
a='eee'
!all(sapply(a,function(x) x == "*" || !is.na(as.numeric(x))))
regexpr([*],file_name[4])
regexpr('[*]',file_name[4])
regexpr('[D]',file_name[4])
regexpr('[d]',file_name[4])
regexpr('d',file_name[4])
regexpr('\d',file_name[4])
regexpr('\\d',file_name[4])
file_name[4]
any(regexpr('\\d',file_name[4])!=1)
any(regexpr('\\d',file_name[4]))
any(regexpr('\\d',file_name[,4]))
regexpr('\\d',file_name[,4])
regexpr('\\d',file_name[4])
regexpr('\\d',file_name[,4])
ds=c('*','3,4)
''
'
ds=c('*',3,4)
ds
regexpr('*',ds)
regexpr('[*]',ds)
regexpr('[*]/\d',ds)
regexpr('[*]/\\d',ds)
ds
regexpr('[*d]',ds)
regexpr('[*\\d]',ds)
regexpr('[*]\|\\d+',ds)
regexpr('[*]|\\d+',ds)
ds
ds=c('*',3,4, 'd')
regexpr('[*]|\\d+',ds)
regexpr('[*]|\\d+',ds)
regexpr('[*]|\\d+',file_name[,4])
ds
ds=c('*',3,4, 'd','D','_')
regexpr('[*]|\\d+',file_name[,4])
regexpr('[*]|\\d+',ds)
ds=c('*',3,4, 'd','D','-')
regexpr('[*]|\\d+',ds)
exp_val <- read.table('../data/experimental_value/real_proliferation.txt', sep='\t', header=TRUE) #file with experimental data
